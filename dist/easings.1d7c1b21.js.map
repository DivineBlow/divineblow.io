{"version":3,"sources":["src/easings.js"],"names":["ease","exponentialIn","t","Math","pow","exponentialOut","exponentialInOut","sineOut","HALF_PI","sin","circularInOut","sqrt","cubicIn","cubicOut","f","cubicInOut","quadraticOut","quarticOut"],"mappings":";;;;;;AAAA;AACA;AACA;AACA;AAEA,IAAMA,IAAI,GAAG;AACXC,EAAAA,aAAa,EAAE,uBAACC,CAAD,EAAO;AACpB,WAAOA,CAAC,IAAI,GAAL,GAAWA,CAAX,GAAeC,IAAI,CAACC,GAAL,CAAS,GAAT,EAAc,QAAQF,CAAC,GAAG,GAAZ,CAAd,CAAtB;AACD,GAHU;AAIXG,EAAAA,cAAc,EAAE,wBAACH,CAAD,EAAO;AACrB,WAAOA,CAAC,IAAI,GAAL,GAAWA,CAAX,GAAe,MAAMC,IAAI,CAACC,GAAL,CAAS,GAAT,EAAc,CAAC,IAAD,GAAQF,CAAtB,CAA5B;AACD,GANU;AAOXI,EAAAA,gBAAgB,EAAE,0BAACJ,CAAD,EAAO;AACvB,WAAOA,CAAC,IAAI,GAAL,IAAYA,CAAC,IAAI,GAAjB,GACHA,CADG,GAEHA,CAAC,GAAG,GAAJ,GACE,CAAC,GAAD,GAAOC,IAAI,CAACC,GAAL,CAAS,GAAT,EAAe,OAAOF,CAAR,GAAa,IAA3B,CADT,GAEE,CAAC,GAAD,GAAOC,IAAI,CAACC,GAAL,CAAS,GAAT,EAAc,OAAQF,CAAC,GAAG,IAA1B,CAAP,GAA0C,GAJhD;AAKD,GAbU;AAcXK,EAAAA,OAAO,EAAE,iBAACL,CAAD,EAAO;AACd,QAAMM,OAAO,GAAG,kBAAhB;AACA,WAAOL,IAAI,CAACM,GAAL,CAASP,CAAC,GAAGM,OAAb,CAAP;AACD,GAjBU;AAkBXE,EAAAA,aAAa,EAAE,uBAACR,CAAD,EAAO;AACpB,WAAOA,CAAC,GAAG,GAAJ,GACD,OAAO,MAAMC,IAAI,CAACQ,IAAL,CAAU,MAAM,MAAMT,CAAN,GAAUA,CAA1B,CAAb,CADC,GAED,OAAOC,IAAI,CAACQ,IAAL,CAAU,CAAC,MAAM,MAAMT,CAAb,KAAmB,MAAMA,CAAN,GAAU,GAA7B,CAAV,IAA+C,GAAtD,CAFN;AAGD,GAtBU;AAuBXU,EAAAA,OAAO,EAAE,iBAACV,CAAD,EAAO;AACd,WAAOA,CAAC,GAAGA,CAAJ,GAAQA,CAAf;AACD,GAzBU;AA0BXW,EAAAA,QAAQ,EAAE,kBAACX,CAAD,EAAO;AACf,QAAMY,CAAC,GAAGZ,CAAC,GAAG,GAAd;AACA,WAAOY,CAAC,GAAGA,CAAJ,GAAQA,CAAR,GAAY,GAAnB;AACD,GA7BU;AA8BXC,EAAAA,UAAU,EAAE,oBAACb,CAAD,EAAO;AACjB,WAAOA,CAAC,GAAG,GAAJ,GACH,MAAMA,CAAN,GAAUA,CAAV,GAAcA,CADX,GAEH,MAAMC,IAAI,CAACC,GAAL,CAAS,MAAMF,CAAN,GAAU,GAAnB,EAAwB,GAAxB,CAAN,GAAqC,GAFzC;AAGD,GAlCU;AAmCXc,EAAAA,YAAY,EAAE,sBAACd,CAAD,EAAO;AACnB,WAAO,CAACA,CAAD,IAAMA,CAAC,GAAG,GAAV,CAAP;AACD,GArCU;AAsCXe,EAAAA,UAAU,EAAE,oBAACf,CAAD,EAAO;AACjB,WAAOC,IAAI,CAACC,GAAL,CAASF,CAAC,GAAG,GAAb,EAAkB,GAAlB,KAA0B,MAAMA,CAAhC,IAAqC,GAA5C;AACD;AAxCU,CAAb","file":"easings.1d7c1b21.js","sourceRoot":"..","sourcesContent":["//\n// these easing functions are based on the code of glsl-easing module.\n// https://github.com/glslify/glsl-easings\n//\n\nconst ease = {\n  exponentialIn: (t) => {\n    return t == 0.0 ? t : Math.pow(2.0, 10.0 * (t - 1.0));\n  },\n  exponentialOut: (t) => {\n    return t == 1.0 ? t : 1.0 - Math.pow(2.0, -10.0 * t);\n  },\n  exponentialInOut: (t) => {\n    return t == 0.0 || t == 1.0\n      ? t\n      : t < 0.5\n        ? +0.5 * Math.pow(2.0, (20.0 * t) - 10.0)\n        : -0.5 * Math.pow(2.0, 10.0 - (t * 20.0)) + 1.0;\n  },\n  sineOut: (t) => {\n    const HALF_PI = 1.5707963267948966;\n    return Math.sin(t * HALF_PI);\n  },\n  circularInOut: (t) => {\n    return t < 0.5\n        ? 0.5 * (1.0 - Math.sqrt(1.0 - 4.0 * t * t))\n        : 0.5 * (Math.sqrt((3.0 - 2.0 * t) * (2.0 * t - 1.0)) + 1.0);\n  },\n  cubicIn: (t) => {\n    return t * t * t;\n  },\n  cubicOut: (t) => {\n    const f = t - 1.0;\n    return f * f * f + 1.0;\n  },\n  cubicInOut: (t) => {\n    return t < 0.5\n      ? 4.0 * t * t * t\n      : 0.5 * Math.pow(2.0 * t - 2.0, 3.0) + 1.0;\n  },\n  quadraticOut: (t) => {\n    return -t * (t - 2.0);\n  },\n  quarticOut: (t) => {\n    return Math.pow(t - 1.0, 3.0) * (1.0 - t) + 1.0;\n  },\n}\n\nexport {ease};"]}